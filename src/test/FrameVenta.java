package test;

import com.banorte.BanorteException;
import com.banorte.pinpad.Vx820Segura;
import com.banorte.ConectorBanorte;
import java.util.HashMap;
import javax.swing.*;

public class FrameVenta extends javax.swing.JFrame {
    
    //Llenamos la tabla para enviar la transacción
    public FrameVenta() {
        initComponents();
        
        TxtMerchantid.setText("");
        TxtUser.setText("");
        TxtPass.setText("");
        TxtTerminalid.setText("");
        TxtControl.setText("");
        TxtAmount.setText("0.01");
        TxtLan.setText("EN");
        TxtUrl.setText("https://via.pagosbanorte.com/InterredesSeguro");       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        TxtMerchantid = new javax.swing.JTextField();
        TxtUser = new javax.swing.JTextField();
        TxtPass = new javax.swing.JTextField();
        TxtTerminalid = new javax.swing.JTextField();
        TxtAmount = new javax.swing.JTextField();
        TxtControl = new javax.swing.JTextField();
        TxtLan = new javax.swing.JTextField();
        TxtUrl = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Venta");

        jLabel2.setText("Merchant ID");

        jLabel3.setText("User");

        jLabel4.setText("Password");

        jLabel5.setText("Terminal ID");

        jLabel6.setText("Amount");

        jLabel7.setText("Control Number");

        jLabel8.setText("Language");

        jLabel9.setText("URL");

        jButton1.setText("Vender");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TxtLan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jButton1)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TxtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TxtUser, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                    .addComponent(TxtMerchantid)))
                            .addComponent(TxtTerminalid, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtControl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtLan, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 169, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtMerchantid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TxtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TxtTerminalid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TxtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TxtControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(TxtLan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(TxtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TxtLanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLanActionPerformed
        
    }//GEN-LAST:event_TxtLanActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Creamos el objeto pinpad
        Vx820Segura pinpad  = new Vx820Segura("EN");

        //Se crean los HashMaps para los parámetros de la lectura de la tarjeta 
        HashMap leerEntrada = new HashMap(20);
        HashMap leerSalida = new HashMap(20);
        
        //Se crean los HashMaps para los parámetros para enviar la transacción
        HashMap parametrosEntrada = new HashMap(20);
        HashMap parametrosSalida = new HashMap(20);

        //Ingresamos los parámetros de entrada para la lectura de la tarjeta
        String amount = "0.01";
        String PagoMovil = "0";
        leerEntrada.put("AMOUNT", amount);
        leerEntrada.put("PAGO_MOVIL", PagoMovil);

        //Se solicita la lectura de la tarje|ta
        try {
            pinpad.readCard(leerEntrada, leerSalida);
        }
        catch(BanorteException e) {
            System.out.println("Error al leer la tarjeta" + e.getMessage());
        }

        //Recuperamos datos de la Lectura de la Tarjeta
        //String Track1 = (String) leerSalida.get("TRACK1");
        String Track2 = (String) leerSalida.get("TRACK2");

        //Determinar el Tipo de Entrada (Banda/Chip/Fallback)
        String PosEntryMode = (String) leerSalida.get("ENTRY_MODE");
        String declinadaChip = "";
        String EmvTags = "";

        //Revisamos si es de Chip para asi poder obetener los EMVTAGS
        if (PosEntryMode.equals("CHIP")) {
            EmvTags = (String) leerSalida.get("EMV_TAGS");
            parametrosEntrada.put("EMV_TAGS", EmvTags);
            declinadaChip = (String)leerSalida.get("CHIP_DECLINED");
        }

        //Primeramente validamos si no fue un Declinado Offline, validando el valor de la variable de retorno DECLINADA_CHIP
        if (declinadaChip.equals("1")) {
            //Aquí termina la transacción
            System.out.println("La transacción fue declinada offline");
            JOptionPane.showMessageDialog(null,"Declinada Offline");
        }
        else {
            //Se envía transacción a Banorte mediante el método readCard
            //Llenamos la tabla para enviar la transacción
            parametrosEntrada.put("MERCHANT_ID",TxtMerchantid.getText());
            parametrosEntrada.put("USER", TxtUser.getText());
            parametrosEntrada.put("PASSWORD", TxtPass.getText());
            parametrosEntrada.put("CMD_TRANS", "AUTH");
            parametrosEntrada.put("TERMINAL_ID", TxtTerminalid.getText());
            parametrosEntrada.put("CONTROL_NUMBER", TxtControl.getText());
            parametrosEntrada.put("MODE", "PRD");
            parametrosEntrada.put("AMOUNT", amount);
            parametrosEntrada.put("TRACK2", Track2);
            parametrosEntrada.put("ENTRY_MODE", PosEntryMode);
            parametrosEntrada.put("RESPONSE_LANGUAGE", "EN");
            parametrosEntrada.put("BANORTE_URL", "https://via.pagosbanorte.com/InterredesSeguro");

            //Validamos si el Track1 está presente
            //if (!"".equals(Track1))
            //{
            //parametrosEntrada.put("TRACK1", EmvTags);
            //}

            //Método Enviar Transacción
            //Se realiza el proceso de la transacción
            try {
                pinpad.processTransaction(parametrosEntrada, parametrosSalida);
            } 
            catch (BanorteException e) {
                System.out.println("Falla al procesar la transacción: " + e.getMessage());
            }

            // Validamos si la tarjeta es CHIP
            if (PosEntryMode.equals("CHIP")) {
                //Se crean los HashMaps para los parámetros de Notificar Resultado
                HashMap parametrosNotifyEntrada = new HashMap(20);
                HashMap parametrosNotifySalida = new HashMap(20);
                
                //Obtenemos datos de salida del procesamiento de la transacción
                String resultadoPayw = (String) parametrosSalida.get("PAYW_RESULT");
                String codigoAut = (String)parametrosSalida.get("AUTH_CODE");
                String datosEMV = (String)parametrosSalida.get("EMV_TAGS");
                
                ////aqui me trae nulos
                //Validamos si hubo respuesta de la transacción
                if(resultadoPayw != null) {
                    
                    //Validamos si existe información en DATOS_EMV
                    if (datosEMV != null) {
                        parametrosNotifyEntrada.put("EMV_TAGS", datosEMV);
                    }
                    
                    if (resultadoPayw.equals("A")) {
                        parametrosNotifyEntrada.put("RESULT", "APPROVED");
                        parametrosNotifyEntrada.put("AUTH_CODE", codigoAut);
                    }
                    else if (resultadoPayw.equals("D")) {
                        parametrosNotifyEntrada.put("RESULT", "DECLINED");
                    }
                    else {
                        parametrosNotifyEntrada.put("RESULT", "NO_RESPONSE");
                    }
                }
                else {
                    parametrosNotifyEntrada.put("RESULT", "NO_RESPONSE");
                }

                //Método notificar resultado
                try {
                    pinpad.notifyResult(parametrosNotifyEntrada, parametrosNotifySalida);
                }
                catch (BanorteException e) {
                    System.out.println("Error al notificar el resultado:" +e.getMessage());
                }

                //Obtenemos el resultado de notificar la transacción
                String resultadoEMV = (String) parametrosNotifySalida.get("EMV_RESULT");

                //Validamos resultadoEMV
                if (resultadoEMV != null) {
                    if (resultadoEMV.equals("D") && resultadoPayw.equals("A")) {
                        JOptionPane.showMessageDialog(null,"DECLINADA EMV");
                        
                        //Se genera el reverso por Declinado EMV
                        //Se crean los hashMaps para el reverso
                        HashMap reversaEntrada = new HashMap(20);
                        HashMap reversaSalida = new HashMap(20);
                        
                        //Se obtiene la referencia de la transacción anterior
                        String reference = (String) parametrosSalida.get("REFERENCE");
                        
                        //Se llena la table con los parámetros del reverso
                        reversaEntrada.put("MERCHANT_ID", "7395007");
                        reversaEntrada.put("USER", "a7395007");
                        reversaEntrada.put("PASSWORD", "*******");
                        reversaEntrada.put("CMD_TRANS", "REVERSAL");
                        reversaEntrada.put("TERMINAL_ID", "327783832");
                        reversaEntrada.put("REFERENCE", reference);
                        reversaEntrada.put("MODE", "PRD");
                        reversaEntrada.put("RESPONSE_LANGUAGE", "EN");
                        reversaEntrada.put("BANORTE_URL", "https://via.pagosbanorte.com/InterredesSeguro");
                        
                        //Como fue un declinado EMV se envía el parámetro CAUSE con valor fijo 17
                        reversaEntrada.put("CAUSE", "17");

                        //Método Enviar Transacción para enviar el reverso
                        try {
                            ConectorBanorte.sendTransaction(reversaEntrada,reversaSalida);
                        }
                        catch(BanorteException e) {
                            System.out.println("Error al enviar la operación a Banorte: " +
                            e.getMessage());
                        }
                    }
                    else if (resultadoEMV.equals("A") && resultadoPayw.equals("A")) {
                        JOptionPane.showMessageDialog(null,"APROBADA");
                    }
                    else {
                        JOptionPane.showMessageDialog(null,"DECLINADA1");
                    }
                }
                else {
                    //Si la transacción fue realizada con banda magnética
                    String resultado = (String)parametrosSalida.get("PAYW_RESULT");

                    //Únicamente se valida el resultado de Payworks
                    if (resultado.equals("A")) {
                        String codAut = (String) parametrosSalida.get("AUTH_CODE");
                        JOptionPane.showMessageDialog(null,"APROBADA: " + codAut);
                    }
                    else {
                        JOptionPane.showMessageDialog(null,"DECLINADA2");
                    }
                }
            }
        }

        //Terminar transacción
        try {
            pinpad.endTransaction();
        } 
        catch(BanorteException e) {
            System.out.println("Falla al terminar la transacción: " +
            e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameVenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TxtAmount;
    private javax.swing.JTextField TxtControl;
    private javax.swing.JTextField TxtLan;
    private javax.swing.JTextField TxtMerchantid;
    private javax.swing.JTextField TxtPass;
    private javax.swing.JTextField TxtTerminalid;
    private javax.swing.JTextField TxtUrl;
    private javax.swing.JTextField TxtUser;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}